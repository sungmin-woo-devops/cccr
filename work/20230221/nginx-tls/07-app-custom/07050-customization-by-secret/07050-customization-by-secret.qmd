### 7.5 시크릿을 이용한 사용자화

시크릿이란?
- 컨피그 맵과 같은 키/값 저장소
- 차이점 패스워드, 암호화 키/인증서, 토큰 등 소량(시크릿 하나당 1MiB 제한)의 
  민감한 데이터를 저장 및 안전하게 제공하기 위한 목적으로 사용됨
- 시크릿의 값은 Base64 방식으로 인코딩되어 저장
- 값 제공 시 Base64로 다시 디코딩하여 제공

컨피그맵 vs. 시크릿
- 컨피그맵 : 단순 데이터, 민감 X 설정 데이터 - 저장, 참조
- 시크릿 : 민감한 데이터 - 안전하게 저장/참조

===

시크릿 정의 및 확인

시크릿 저장 데이터 종류
1. generic : 기본 임의 데이터
2. docker-registry: 도커 저장소 인증 정보
3. tls: TLS 키 및 인증서

직접 시크릿에 사용 가능하지 않은 시크릿 저장 데이터 종류는 다음과 같다.
- service-account-token : 서비스 계정 토큰
- https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/

kubect get secrets에 표시되는 데이터 종류는 다음과 같다
- Opaque (=generic)
- kubernetes.io/dockerconfigjson
- kubernetes.io/tls
- kubernetes.io/service-account-token

===

시크릿 생성 사용법
1. generic
    
     kubectl create secert generic NAME --from-file=source
     kubectl create secret generic NAME --from-file=key
     kubectl create secret generic NAME --from-file=key=value
     kubectl create secret generic NAME --from-literal=key1=value1

2. docker-registry
     kubectl create secret docker-registry NAME \
     --docker-username=user \
     --docker-password=password \
     --docker-email=email \
     [--docker-server=string] # Docker Hub일 경우 생략

3. tls
     kubectl create secrets tls NAME --cert=cert-file --key=key-file

===

Base64 인코딩 & 디코딩
$ echo "P@ssw0rd" | base64
UEBzc3cwcmQK

$ echo "UEBzc3cwcmQK" | base64 --decode(-d)
P@ssw0rd

---

yq로 파싱 후 base64로 디코딩하여 원본 값 조회하기
$ kubectl get secret secret-generic2 -o yaml | yq e ".data.apikey" | base64 \ --decode
api_key_value



---

manifest file -> secret 생성
manifest 파일로 시크릿을 만들 때, value 부분은 base64로 인코딩된 값이 들어가야 한다.
(다른 오브젝트들과의 차이점)

===

#### 기본 토큰 시크릿
쿠버네티스에서 모든 파드에는 기본적으로 토큰 시크릿이 적용되어 있다.

$ kubernetes get secrets
default-token-xxxxx 시크릿 존재

$ kubectl describe secrets default-token-x4tb2
https://blog.yevgnenll.me/
https://blog.yevgnenll.me/k8s/kubernates-api-server-security

























