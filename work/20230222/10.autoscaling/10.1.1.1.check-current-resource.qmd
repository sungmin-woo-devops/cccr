10.1 파드의 리소스 관리

지금까지 생성한 컨트롤러의 파드 템플릿 및 파드에 리소스(CPU 및 메모리) 관리에 관한 정의를 하지 않았다.
따라서 파드(컨테이너)는 파드에서 실행된 프로세스가 원하는 만큼 CPU 및 메모리를 제한 없이 사용할 수 있다.

또한 여러 파드가 실제 가지고 있는 하드웨어 리소스보다 더 많은 리소스를 요구하는 경우
프로세스는 서로 많은 리소스를 확보하기 위해 서로 경합하게 된다.
프로세스 간 경합이 발생할 경우 전체적 성능 저하로 이어질 수 있으며 
심지어 필요한 리소스를 받지 못해 종료되거나 동작을 못하는 파드도 생겨날 수 있다.


쿠버네티스는 파드 및 컨테이너에 최소 필요한 리소스의 양을 요청할 수 있는 리소스 요청(Request)을 구성할 수 있고,
최대 사용할 수 있는 리소스 양을 제한할 수 있는 '리소스 제한(Limit)"을 구성할 수 있다.

실제 쿠버네티스의 기능이라기보다 컨테이너 런타임에서 제공해주는 기능을 가져다 쓰는 것이다.

---

##### 언제 사용하는가?
부하가 많은 서비스를 제공할 경우 전체 리소스를 모두 차지할 수 없게 제한해줄 필요가 있다.

---

10.1.1

10.1.1.1 현재 리소스 사용량 확인

##### 쿠버네티스 노드/파드 리소스 사용량을 관리하느 Metrics API 컴포넌트가 설치되어 있어야 한다.
[vagrant@kube-control1 statefulset]$ kubectl top nodes
error: Metrics API not available

##### Metrics Server 구축
===================================
[vagrant@kube-control1 statefulset]$ kubectl create -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
serviceaccount/metrics-server created
clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created
clusterrole.rbac.authorization.k8s.io/system:metrics-server created
rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created
clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created
clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created
service/metrics-server created
deployment.apps/metrics-server created
apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created

kube-system 네임스페이스에서 Metrics Server 디플로이먼트 확인
[vagrant@kube-control1 statefulset]$ kubectl get all -n kube-system
NAME                                           READY   STATUS    RESTARTS         AGE
pod/calico-kube-controllers-68d86f8988-d72mz   1/1     Running   15 (4h18m ago)   13d
pod/calico-node-7jx4j                          1/1     Running   15 (4h17m ago)   13d
pod/calico-node-cclbv                          1/1     Running   15 (4h17m ago)   13d
pod/calico-node-lrkgs                          1/1     Running   15 (4h18m ago)   13d
pod/calico-node-pk9qr                          1/1     Running   15 (4h18m ago)   13d
pod/coredns-78fcd69978-l5klr                   1/1     Running   15 (4h18m ago)   13d
pod/coredns-78fcd69978-vbnmc                   1/1     Running   15 (4h18m ago)   13d
pod/etcd-kube-control1                         1/1     Running   15 (4h18m ago)   13d
pod/kube-apiserver-kube-control1               1/1     Running   16 (4h18m ago)   13d
pod/kube-controller-manager-kube-control1      1/1     Running   15 (4h18m ago)   13d
pod/kube-proxy-8w88b                           1/1     Running   15 (4h17m ago)   13d
pod/kube-proxy-j8qg7                           1/1     Running   15 (4h18m ago)   13d
pod/kube-proxy-kdlr8                           1/1     Running   15 (4h17m ago)   13d
pod/kube-proxy-w2mh9                           1/1     Running   15 (4h18m ago)   13d
pod/kube-scheduler-kube-control1               1/1     Running   15 (4h18m ago)   13d
pod/metrics-server-684454657f-qjtxx            0/1     Running   0                58s

NAME                     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE
service/kube-dns         ClusterIP   10.96.0.10       <none>        53/UDP,53/TCP,9153/TCP   13d
service/metrics-server   ClusterIP   10.103.220.190   <none>        443/TCP                  58s

NAME                         DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE
daemonset.apps/calico-node   4         4         4       4            4           kubernetes.io/os=linux   13d
daemonset.apps/kube-proxy    4         4         4       4            4           kubernetes.io/os=linux   13d

NAME                                      READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/calico-kube-controllers   1/1     1            1           13d
deployment.apps/coredns                   2/2     2            2           13d
*deployment.apps/metrics-server            0/1     1            0           58s
(인증서 설정을 해줘야 READY 상태가 된다.)

NAME                                                 DESIRED   CURRENT   READY   AGE
replicaset.apps/calico-kube-controllers-68d86f8988   1         1         1       13d
replicaset.apps/coredns-78fcd69978                   2         2         2       13d
replicaset.apps/metrics-server-684454657f            1         1         0       58s

해당 디플로이먼트 설정에서 다음 설정값을 추가해줘야 자체인증 인증서를 사용할 수 있다.
metrics-server Deployment에 TLS 인증서 관련 설정 추가
kubectl edit deployments -n kube-system metrics-server
=====
 18 spec:
 30   template:
 35 	spec:
 36   	  containers:
 37   	   - args:
 38     	   - --cert-dir=/tmp
 39     	   - --secure-port=4443
 40     	   - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
 41     	   - --kubelet-use-node-status-port
 42     	   - --metric-resolution=15s
 43         - --kubelet-insecure-tls
=====

metrics-server 디플로이먼트가 READY 상태가 됨
[vagrant@kube-control1 statefulset]$ kubectl get all -n kube-system 
NAME                                           READY   STATUS    RESTARTS         AGE
pod/metrics-server-85bc67fbcd-hbkbv            1/1     Running   0                75s

NAME                                      READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/calico-kube-controllers   1/1     1            1           13d
deployment.apps/coredns                   2/2     2            2           13d
deployment.apps/metrics-server            1/1     1            1           5m13s

---

노드 리소스 확인
[vagrant@kube-control1 statefulset]$ kubectl top nodes
NAME            CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   
kube-control1   206m         10%    1495Mi          51%       
kube-node1      75m          7%     802Mi           42%       
kube-node2      66m          6%     719Mi           38%       
kube-node3      56m          5%     962Mi           51%      

1 Core = 1000 millicore(m)= 100%
0.139 Core = 139m = 13%

파드 리소스 확인
[vagrant@kube-control1 statefulset]$ kubectl top pods
NAME                                      CPU(cores)   MEMORY(bytes)   
myapp-rs-5tzdf                            0m           1Mi             
myapp-rs-jvjsm                            1m           1Mi             
myapp-rs-ncsq7                            0m           4Mi             
myapp-sts-0                               0m           1Mi             
myapp-sts-1                               1m           1Mi             
nfs-client-provisioner-7c494c767d-fbmhr   1m           7Mi  

ingress가 사용하는 리소스 확인
[vagrant@kube-control1 statefulset]$ kubectl top pods -n ingress-nginx
NAME                                        CPU(cores)   MEMORY(bytes)   
ingress-nginx-controller-6f9544b86b-8tq2v   1m           79Mi    


===================================

cf) Metrics Server 공식 Github 페이지
https://github.com/kubernetes-sigs/metrics-server
https://ssup2.github.io/theory_analysis/Kubernetes_Metric_Server/
http://blog.itaysk.com/2019/01/15/Kubernetes-metrics-and-monitoring
